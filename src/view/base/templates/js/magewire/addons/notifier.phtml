<?php

declare(strict_types=1);

use Magento\Framework\Escaper;
use Magento\Framework\View\Element\Template;
use Magewirephp\Magewire\Model\Magewire\Notifier\NotificationStateEnum;
use Magewirephp\Magewire\Model\Magewire\Notifier\NotificationTypeEnum;
use Magewirephp\Magewire\ViewModel\Magewire as MagewireViewModel;

/** @var Escaper $escaper */
/** @var Template $block */
/** @var MagewireViewModel $magewireViewModel */

$magewireViewModel = $block->getData('view_model');
$magewireFragment = $magewireViewModel->utils()->fragment();

/** @internal Do not modify to ensure Magewire continues to function correctly. */
?>
<?php $script = $magewireFragment->make()->script()->start() ?>
<script>
    function magewireNotifierAddon() {
        'use strict';

        return {
            notifications: [],

            hooks: {
                onActivate: [],
                onCleanup: [],
                onTerminate: [],
                onRecover: [],
                onStateChange: [],
                onFailure: []
            },

            defaults: {
                notification: {
                    state: '<?= $escaper->escapeJs(NotificationStateEnum::IDLE->getState()) ?>',
                    level: <?= $escaper->escapeJs(NotificationStateEnum::IDLE->getLevel()) ?>,
                    type: '<?= $escaper->escapeJs(NotificationTypeEnum::INFO->value) ?>',
                    duration: null,
                    recoverable: false,

                    hooks: {
                        onActivate: ({ notification }) => {},
                        onCleanup: ({ notification }) => {},
                        onTerminate: ({ notification }) => {},
                        onRecover: ({ notification }) => {},
                        onStateChange: ({ value, previous, notification }) => {},

                        onFailure: ({ notification, reason }) => {
                            console.warn(`Notification: ${reason || 'no reason given.'}`);
                        }
                    }
                }
            },

            create: async function(message, options = {}, hooks = {}, activate = true) {
                let notification = { ...{
                    title: null,
                    message: message || '<?= $escaper->escapeJs(__('Message Unknown')) ?>',
                    type: this.defaults.notification.type,
                    duration: this.defaults.notification.duration
                }, ...options };

                <?php /* Keeps the notification visible for a day. */ ?>
                if (notification.duration === 0 || notification.duration === false) {
                    notification.duration = (60 * 60 * 1000) * 24;
                }

                <?php /* Calculate reading duration based on the message length. */ ?>
                if (notification.duration === null) {
                    notification.duration = Magewire.utilities.str.calculateReadingDurationByStrLength(notification.message);
                }

                // Default Hooks.
                notification.hooks = { ...this.defaults.notification.hooks, ...hooks };

                // Defaults.
                notification.id = Date.now();
                notification.state = this.defaults.notification.state;
                notification.active = false;

                <?php /* Available state levels based on case sort order. */ ?>
                const levels = JSON.parse('<?= json_encode(NotificationStateEnum::cases()) ?>');
                const self = this;

                notification = new Proxy(notification, {
                    set(target, property, value) {
                        const previous = target[property];
                        target[property] = value;

                        if (property === 'state' && previous !== value) {
                            <?php /* A negative level is allowed to be set when no matching level was found. */ ?>
                            notification.level = levels.indexOf(value);

                            if (typeof target.hooks.onStateChange === 'function') {
                                self.trigger('state-change', { state: value, previous: previous, notification: notification }, notification)
                            }
                        }

                        return true;
                    }
                });

                this.notifications.push(notification);

                if (activate) {
                    await this.activate(notification.id);
                }

                return notification;
            },

            get: function(id) {
                try {
                    return this.notifications.find(notification => notification.id === id);
                } catch (exception) {
                    return null;
                }
            },

            activate: async function(id) {
                try {
                    const notification = this.get(id);

                    notification.state = '<?= $escaper->escapeJs(NotificationStateEnum::RUNNING->getState()) ?>';
                    notification.active = typeof notification.message === 'string' && notification.message.length !== 0;

                    try {
                        await this.trigger('activate', { notification: notification }, notification)
                            .then(() => this.finish(id));
                    } catch (reason) {
                        await this.fail(id, reason);
                    } finally {
                        if (notification.state) {
                            await this.cleanup(id);
                        }
                    }
                } catch(exception) {
                    await Promise.reject(exception)
                }
            },

            finish: async function(id) {
                const notification = this.get(id);

                notification.state = '<?= $escaper->escapeJs(NotificationStateEnum::SUCCEEDED->getState()) ?>';

                return notification;
            },

            terminate: async function(id) {
                const notification = this.get(id);

                notification.state = '<?= $escaper->escapeJs(NotificationStateEnum::TERMINATED->getState()) ?>';
                notification.active = false;

                await this.trigger('terminate', { notification: notification }, notification);

                return notification;
            },

            fail: async function(id, reason = null) {
                const notification = this.get(id);

                notification.state = '<?= $escaper->escapeJs(NotificationStateEnum::FAILED->getState()) ?>';
                await this.trigger('failure', { notification: notification, reason: reason }, notification)

                return notification;
            },

            cleanup: async function(id) {
                const notification = this.get(id);

                notification.timeout = setTimeout(() => notification.active = false, notification.duration);
                await this.trigger('cleanup', { notification: notification }, notification);

                return notification;
            },

            hold: async function(id) {
                const notification = this.get(id);

                if (notification.timeout) {
                    await clearTimeout(notification.timeout);
                }

                return notification;
            },

            fetch: async function() {
                return this.notifications;
            },

            trigger: async function(hook, args = {}, notification = null) {
                const method = `on${hook
                    .replace(/-(.)/g, (_, letter) => letter.toUpperCase())
                    .replace(/^./, char => char.toUpperCase())}`;

                <?php /* Execute notification hook if it exists. */ ?>
                const notificationHook = notification?.hooks?.[method];

                if (typeof notificationHook === 'function') {
                    await notificationHook({ ...args });
                }

                <?php /* Trigger global hooks. */ ?>
                await Magewire.triggerAsync(`addons.notifier.${hook}`, args);
            },

            recover: async function(id) {
                await this.hold(id);

                const notification = this.get(id);
                await this.trigger('recover', { notification: notification }, notification);

                notification.state = '<?= $escaper->escapeJs(NotificationStateEnum::RECOVERED->value) ?>';

                return notification;
            }
        }
    }

    <?php /* Register as Magewire utility. */ ?>
    document.addEventListener('magewire:init', () => Magewire.addon('notifier', magewireNotifierAddon, true), { once: true });
</script>
<?php $script->end() ?>
