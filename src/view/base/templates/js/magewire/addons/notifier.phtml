<?php

declare(strict_types=1);

use Magento\Framework\Escaper;
use Magento\Framework\View\Element\Template;
use Magewirephp\Magewire\Model\Magewire\Notifier\NotificationStateEnum;
use Magewirephp\Magewire\Model\Magewire\Notifier\NotificationTypeEnum;
use Magewirephp\Magewire\ViewModel\Magewire as MagewireViewModel;

/** @var Escaper $escaper */
/** @var Template $block */
/** @var MagewireViewModel $magewireViewModel */

$magewireViewModel = $block->getData('view_model');
$magewireFragment = $magewireViewModel->utils()->fragment();

/** @internal Do not modify to ensure Magewire continues to function correctly. */
?>
<?php $script = $magewireFragment->make()->script()->start() ?>
<script>
    function magewireNotifierAddon() {
        'use strict';

        return {
            notifications: [],

            defaults: {
                notification: {
                    state: '<?= NotificationStateEnum::IDLE->value ?>',
                    type: '<?= NotificationTypeEnum::INFO->value ?>',
                    duration: null,

                    hooks: {
                        onActivation: () => {},
                        onCleanup: () => {},
                        onFinish: () => {},
                        onTermination: () => {},

                        onFailure: (notification, reason) => {
                            console.warn(`Notification: ${reason || 'no reason given.'}`);
                        }
                    },
                }
            },

            create: async function(message, options = {}, hooks = {}, activate = true) {
                let notification = { ...{
                        title: null,
                        message: message || '<?= $escaper->escapeJs(__('Message Unknown')) ?>',
                        type: this.defaults.notification.type,
                        duration: this.defaults.notification.duration
                    }, ...options };

                <?php /* Keeps the notification visible for a day. */ ?>
                if (notification.duration === 0 || notification.duration === false) {
                    notification.duration = (60 * 60 * 1000) * 24;
                }

                <?php /* Calculate reading duration based on the message length. */ ?>
                if (notification.duration === null) {
                    notification.duration = Magewire.utilities.str.calculateReadingDurationByStrLength(notification.message);
                }

                // Default Hooks.
                notification.hooks = { ...this.defaults.notification.hooks, ...hooks };

                // Defaults.
                notification.id = Date.now();
                notification.state = this.defaults.notification.state;
                notification.active = false;

                this.notifications.push(notification);

                if (activate) {
                    await this.activate(notification.id);
                }

                return notification;
            },

            get: function(id) {
                try {
                    return this.notifications.find(notification => notification.id === id);
                } catch (exception) {
                    return null;
                }
            },

            activate: async function(id) {
                try {
                    const notification = this.get(id);

                    notification.state = '<?= NotificationStateEnum::RUNNING->value ?>';
                    notification.active = typeof notification.message === 'string' && notification.message.length !== 0;

                    try {
                        await Promise.resolve(notification.hooks.onActivation()).then(() => this.finish(id));
                    } catch (reason) {
                        await this.fail(id, reason);
                    } finally {
                        if (notification.state) {
                            await this.cleanup(id);
                        }
                    }
                } catch(exception) {
                    await Promise.reject(exception)
                }
            },

            finish: async function(id) {
                const notification = this.get(id);

                notification.state = '<?= NotificationStateEnum::SUCCEEDED->value ?>';
                await notification.hooks.onFinish(notification);

                return notification;
            },

            terminate: async function(id) {
                const notification = this.get(id);

                notification.state = '<?= NotificationStateEnum::TERMINATED->value ?>';
                notification.active = false;
                await notification.hooks.onTermination(notification);

                return notification;
            },

            fail: async function(id, reason = null) {
                const notification = this.get(id);

                notification.state = '<?= NotificationStateEnum::FAILED->value ?>';
                await notification.hooks.onFailure(notification, reason);

                return notification;
            },

            cleanup: async function(id) {
                const notification = this.get(id);

                notification.timeout = setTimeout(() => notification.active = false, notification.duration);
                await notification.hooks.onCleanup(notification);

                return notification;
            },

            hold: async function(id) {
                const notification = this.get(id);

                if (notification.timeout) {
                    await clearTimeout(notification.timeout);
                }

                return notification;
            },

            fetch: function() {
                return this.notifications;
            }
        }
    }

    <?php /* Register as Magewire utility. */ ?>
    document.addEventListener('magewire:init', () => Magewire.addon('notifier', magewireNotifierAddon, true), { once: true });
</script>
<?php $script->end() ?>
