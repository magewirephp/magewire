<?php

use Magewirephp\Magewire\Model\Action\SyncInput;
use Magewirephp\Magewire\Model\Action\CallMethod;
use Magewirephp\Magewire\Model\Action\FireEvent;


?>
<script nonce="<?= /* @noEscape */ $this->helper(\Magewirephp\Magewire\Helper\CspNonceProvider::class)->generateNonce() ?>">
    function magewireLoaderNotifications(config = {}) {
        return {
            messages: [],

            config: Object.assign({
                messageHideTimeout: 2500
            }, config),

            <?php /* Should be init() for AlpineJS- v3 to autoload, but won't work with v2. */ ?>
            <?php /* Leaving the method name init would make it initialize twice when running v3. */ ?>
            initialize() {
                // Get options from dataset on element AlpineCSP compatible
                if (this.$el.dataset['config']) {
                    config = JSON.parse(this.$el.dataset['config'])

                    this.config = Object.assign({
                        messageHideTimeout: 2500
                    }, config)
                }

                <?php /* @see Magewirephp_Magewire::page/js/magewire/plugin/loader.phtml */ ?>
                document.addEventListener('magewire:loader:start', (event) => {
                    if (event.detail) {
                        this.messageCreate(event.detail);
                    }
                })
                document.addEventListener('magewire:loader:tick', (event) => {
                    if (event.detail) {
                        this.messageCreate(event.detail);
                    }
                })

                <?php /* @see Magewirephp_Magewire::page/js/magewire/plugin/loader.phtml */ ?>
                document.addEventListener('magewire:loader:stop', (event) => {
                    if (this.messages.length === 0 || (! event.detail.component && ! event.detail.component.id && event.detail.loader)) {
                        return;
                    }

                    <?php /* Find the component by its unique key to try and deactivate it. */ ?>
                    for (let message in this.messages) {
                        if (event.detail.loader && this.messages[message].key == event.detail.loader.key) {
                            return this.messageDeactivate(message, event.failure || false);
                        }
                    }
                })
            },

            <?php /* Create a new message an determine if it needs to be shown or should wait. */ ?>
            messageCreate(item) {
                this.messages.push(
                    Object.assign({}, item, {
                        active : true,
                        loader : item.loader,
                        loading: true,
                        success: null,
                        timeout: this.config.messageHideTimeout
                    })
                );
            },

            <?php /* Deactivate message, but not remove it fully from the array to let animations run. */ ?>
            messageDeactivate(index, failure = false) {
                let message = this.messages[index] || false;

                if (message === false) {
                    return console.error('Magewire: Could not deactivate the notification message.');
                }

                if (failure) {
                    message.timeout += 5000;
                }

                message.loading = false;
                message.success = ! failure;

                setTimeout(() => message.active = false, message.timeout)
            },

            messageList() {
                return this.messages.filter(message => message.loader.length);
            },

            notifications() {
                return {};
            },

            messenger() {
                return {};
            },

            getButtonClasses() {
                const message = this.message;
                return {
                    'sync-input' : message.update.type === '<?= /** @noEscape */ SyncInput::ACTION ?>',
                    'call-method': message.update.type === '<?= /** @noEscape */ CallMethod::ACTION ?>',
                    'fire-event' : message.update.type === '<?= /** @noEscape */ FireEvent::ACTION ?>',

                    'message-failure': message.success === false,
                    'message-success': message.success === true
                }
            },

            inactivateMessage() {
                this.message.active = false
            },

            getUnsuccessfulBorderClasses() {
                return {
                    'border-red-600 bg-red-100': this.message.success === false
                }
            },

            getTitleClasses() {
                return {
                    'font-bold': (this.position <= 1 && this.loaders.length >= 3) || (this.position == 0 && this.loaders.length >= 1),
                    'text-gray-400 uppercase': this.position === 0 && this.loaders.length > 2,
                    'text-red-800': this.message.success === false
                }
            },

            isSuccessMessage() {
                return this.message.success === true
            },

            isNotSuccessMessage() {
                return this.message.success === false
            }
        };
    }
    (() => {
        const initFn = () => Alpine.data('magewireLoaderNotifications', magewireLoaderNotifications);
        window.Alpine ? initFn() : window.addEventListener('alpine:init', initFn, {once: true})
    })()
</script>
