<?php
/**
 * Copyright Â© Willem Poortman 2021-present. All rights reserved.
 *
 * Please read the README and LICENSE files for more
 * details on copyrights and license information.
 */

declare(strict_types=1);

/** @var Escaper $escaper */
/** @var Template $block */

use Magento\Framework\Escaper;
use Magento\Framework\View\Element\Template;
use Magewirephp\Magewire\Model\Action\SyncInput;
use Magewirephp\Magewire\Model\Action\CallMethod;
use Magewirephp\Magewire\Model\Action\FireEvent;
?>
<script>
    'use strict';

    (() => {
        document.addEventListener('DOMContentLoaded', () => {
            const filterLoaderData = function(message, component) {
                let loader = component.effects.loader || null

                if (loader) {
                    let data = {}

                    for (let item of message.updateQueue) {
                        let value = true

                        if (typeof loader === 'object') {
                            switch (item.type) {
                                case '<?= /** @noEscape */ SyncInput::ACTION ?>':
                                    let name = item.payload.name

                                    let expression = [
                                        `${ name }:${ item.payload.value }`,
                                        `${ name.substr(0, name.lastIndexOf('.')) }:${ item.payload.value }`,
                                        `${ name }`,
                                        `${ name.substr(0, name.lastIndexOf('.')) }`
                                    ].filter((expression) => {
                                        return expression in loader
                                    })[0] || false

                                    if (expression) {
                                        value = loader[expression]
                                    }

                                    break
                                case '<?= /** @noEscape */ CallMethod::ACTION ?>':
                                    value = loader[item.method]
                                    break
                                case '<?= /** @noEscape */ FireEvent::ACTION ?>':
                                    value = loader[item.payload.event]
                                    break

                                default:
                                    value = true
                            }
                        } else if (typeof loader === 'string') {
                            value = loader
                        }

                        data[component.id] = {
                            key: Date.now(),
                            id: component.id,
                            title: [],
                            type: item.type,
                            use: value !== false,
                        }

                        if (typeof value === 'object') {
                            let title = [value[0]] || null

                            if (item.payload.name in value) {
                                title = [value[item.payload.name]]
                            } else if (value.length === 2) {
                                title = value
                            }

                            Object.assign(data[component.id], { title: title })
                        } else if (typeof value === 'string') {
                            Object.assign(data[component.id], { title: [value] })
                        }

                        <?php /* Check whether the title should be null or kept as an array. */ ?>
                        data[component.id].title = data[component.id].title.length ? data[component.id].title : null
                        <?php /* Create a unique hash for this loader data. */ ?>
                        data[component.id].hash  = btoa(data[component.id].title + data[component.id].type)
                    }

                    return data
                }

                return null
            }

            let queue = []
            let started = null

            const start = function(message, component) {
                let loader = filterLoaderData(message, component) ?? {}

                if (component.id in loader && loader[component.id].use) {
                    loader = loader[component.id]
                    let first = ! queue.some(({ emit }) => emit);

                    if (first) {
                        started = Date.now()

                        queue.push({ loader: loader, component: component })
                    }

                    Magewire.dispatchEvent(`loader:${ first ? 'start' : 'tick' }`, {
                        detail: Object.assign(loader, { component: component, started: started })
                    })
                }
            }

            const stop = function(message, component, failed = false) {
                queue = queue.filter(item => component.id !== item.component.id)

                if (message.response && message.response.effects) {
                    (message.response.effects['emits'] || []).forEach((emit) => {
                        Magewire.components.componentsListeningForEvent(emit.event).forEach((component) => {
                            queue.push({ component: component, emit: true })
                        })
                    })
                }

                if (failed) {
                    Magewire.dispatchEvent('loader:fail', {
                        detail: { component: component }
                    })
                }

                if (! queue.length) {
                    let stopped = Date.now()

                    Magewire.dispatchEvent('loader:stop', {
                        detail: { component: component, stopped: stopped, duration: stopped - started }
                    })
                }
            }

            Magewire.hook('message.sent', (message, component) => {
                start(message, component)
            })
            Magewire.hook('message.processed', (message, component) => {
                stop(message, component)
            })
            Magewire.hook('message.failed', (message, component) => {
                stop(message, component, true)
            })
        })
    })();
</script>
