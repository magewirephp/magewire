<?php declare(strict_types=1);
/**
 * Copyright Â© Willem Poortman 2021-present. All rights reserved.
 *
 * Please read the README and LICENSE files for more
 * details on copyrights and license information.
 */

/** @var Escaper $escaper */
/** @var Template $block */

use Magento\Framework\Escaper;
use Magento\Framework\View\Element\Template;
use Magewirephp\Magewire\Model\Action\SyncInput;
use Magewirephp\Magewire\Model\Action\CallMethod;
use Magewirephp\Magewire\Model\Action\FireEvent;
?>
<script defer>
    'use strict';

    (() => {
        document.addEventListener('DOMContentLoaded', () => {
            let emitsAreAvailable = false
            let loaderUpdates = {}

            const grepLoaderData = (message, component) => {
                let loader = loaderUpdates[component.id] || component.effects.loader || null

                if (loader) {
                    let data = {}

                    for (let item of message.updateQueue) {
                        let value = null

                        if (typeof loader === 'object') {
                            switch (item.type) {
                                case '<?= SyncInput::ACTION ?>':
                                    value = loader[item.payload.name + '.' + item.payload.value] || loader[item.payload.name]
                                    break
                                case '<?= CallMethod::ACTION ?>':
                                    value = loader[item.method]
                                    break
                                case '<?= FireEvent::ACTION ?>':
                                    value = loader[item.payload.event]
                                    break
                            }
                        } else {
                            value = true
                        }

                        if (value) {
                            if (typeof value === 'object') {
                                data[component.id] = {
                                    title: value[item.payload.name]
                                }
                            } else if (typeof value === 'string') {
                                data[component.id] = {
                                    title: value
                                }
                            } else if (value === true) {
                                data[component.id] = item
                            }
                        }
                    }

                    return data
                }

                return null
            }

            Magewire.hook('message.sent', (message, component) => {
                let loaderData = grepLoaderData(message, component) ?? {}

                if (component.id in loaderData || emitsAreAvailable) {
                    emitsAreAvailable = false
                    loaderData = component.id in loaderData ? loaderData[component.id] : null

                    if (loaderData || emitsAreAvailable) {
                        Magewire.dispatchEvent('loader:start', {
                            detail: {
                                message: message,
                                component: component,
                                loader: loaderData
                            }
                        })
                    }
                }
            })

            Magewire.hook('message.processed', (message, component) => {
                if ('loader' in message.response.effects) {
                    emitsAreAvailable = 'emits' in message.response.effects
                    loaderUpdates[component.id] = message.response.effects.loader
                }

                Magewire.dispatchEvent('loader:stop', {
                    detail: {
                        message: message,
                        component: component
                    }
                })
            })

            Magewire.hook('message.failed', (message, component) => {
                Magewire.dispatchEvent('loader:stop', {
                    detail: {
                        message: message,
                        component: component
                    }
                })
            })
        })
    })();
</script>
