<?php declare(strict_types=1);
/**
 * Copyright Â© Willem Poortman 2021-present. All rights reserved.
 *
 * Please read the README and LICENSE files for more
 * details on copyrights and license information.
 */

/** @var Escaper $escaper */
/** @var Template $block */

use Magento\Framework\Escaper;
use Magento\Framework\View\Element\Template;
use Magewirephp\Magewire\Model\Action\SyncInput;
use Magewirephp\Magewire\Model\Action\CallMethod;
use Magewirephp\Magewire\Model\Action\FireEvent;
?>
<script defer>
    'use strict';

    (() => {
        document.addEventListener('DOMContentLoaded', () => {
            let filterLoaderData = (message, component) => {
                let loader = component.effects.loader || null

                if (loader) {
                    let data = {}

                    for (let item of message.updateQueue) {
                        let value = true

                        <?php /* Component $loader variable is an array. */ ?>
                        if (typeof loader === 'object') {
                            switch (item.type) {
                                case '<?= SyncInput::ACTION ?>':
                                    value = loader[item.payload.name + '.' + item.payload.value] || loader[item.payload.name]
                                    break
                                case '<?= CallMethod::ACTION ?>':
                                    value = loader[item.method]
                                    break
                                case '<?= FireEvent::ACTION ?>':
                                    value = loader[item.payload.event]
                                    break

                                default:
                                    value = true
                            }
                        }

                        data[component.id] = {
                            key: Date.now(),
                            id: component.id,
                            title: null,
                            type: item.type.replace(/[A-Z]/g, letter => `-${letter.toLowerCase()}`),
                        }

                        if (typeof value === 'object') {
                            Object.assign(data[component.id], { title: value[item.payload.name] })
                        } else if (typeof value === 'string') {
                            Object.assign(data[component.id], { title: value })
                        }

                        data[component.id].hash = btoa(data[component.id].title + data[component.id].type)
                    }

                    return data
                }

                return null
            }

            let queue = {}
            let previous = null

            let stop = (id, hasEmits, failure = false) => {
                if (id in queue) {
                    if (failure || (hasEmits === false && Object.keys(queue).length === 1)) {
                        Magewire.dispatchEvent('loader:stop', {
                            detail: Object.assign(queue[id], { failure: failure })
                        })
                    }

                    delete(queue[id])
                }
            }

            Magewire.hook('message.sent', (ms, msc) => {
                let loader = filterLoaderData(ms, msc) ?? {}

                if (msc.id in loader || previous) {
                    queue[msc.id] = loader[msc.id] || previous

                    if (loader[msc.id]) {
                        previous = Object.assign(queue[msc.id], { id: msc.id })
                    }

                    Magewire.dispatchEvent('loader:start', {
                        detail: queue[msc.id]
                    })
                }
            })

            Magewire.hook('message.processed', (mp, mpc) => {
                let emits = mp.response.effects.emits || {}
                stop(mpc.id, !! emits.length === 0)
            })
            Magewire.hook('message.failed', (mf, mfc) => {
                stop(mfc.id, false, true)
            })
        })
    })();
</script>
